spring:
  application:
    name: gateway-service-zuul

server:
  port: 8888

# 访问/it/** 直接重定向到http://www.baidu.com/**
zuul:
  routes:
    xxx-yyy-zzz:
      path: /it/**
      url: http://www.baidu.com/
    # 目的:测试重定向
    # 1.启动spring-cloud-provider工程
    # 2.启动spring-cloud-zuul工程
    # 3.浏览器访问http://localhost:8888/hello
    hello:
      path: /hello-prj/**
      url: http://localhost:8001/
    # 测试服务化后,测试路由转发和负载均衡
    # 1.启动spring-cloud-eureka工程
    # 2.启动spring-cloud-provider、spring-cloud-provider-node2工程
    # 3.启动spring-cloud-zuul工程
    # 4.浏览器访问http://localhost:8888/provider/hello  观察浏览器的输出的变化:一定规律交替出现Node 2:Say hi~~ 和Node 1:Say hi~~ 说明测试达到预期
    api-provider:
      path: /provider/**
      serviceId: provider
  # 是否开启重试功能
  retryable: true

ribbon:
  MaxAutoRetries: 2
  MaxAutoRetriesNextServer: 0

#是否开启重试功能
#zuul.retryable=true
#对当前服务的重试次数
#ribbon.MaxAutoRetries=2
#切换相同Server的次数
#ribbon.MaxAutoRetriesNextServer=0



# 服务化
# 向注册中心注册
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

  #网关的默认路由规则
  #
  # 但是如果后端服务多达十几个的时候，每一个都这样配置也挺麻烦的，spring cloud zuul已经帮我们做了默认配置。默认情况下，Zuul会代理所有注册到Eureka Server的微服务，
  # 并且Zuul的路由规则如下：http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**会被转发到serviceId对应的微服务。
  #
  #我们注销掉gateway-service-zuul-eureka项目中关于路由的配置：
  #
  ##zuul.routes.api-a.path=/producer/**
  ##zuul.routes.api-a.serviceId=spring-cloud-producer
  #重新启动后，访问http://localhost:8888/spring-cloud-producer/hello?name=%E5%B0%8F%E6%98%8E，测试返回结果和上述示例相同，说明Spring cloud zuul默认已经提供了转发功能。





